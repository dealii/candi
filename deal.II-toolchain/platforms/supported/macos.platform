# macOS
#
# Detailed Installation Notes:
# - Open Terminal, and install Xcode command line tools via
# $  xcode-select --install
#
# - Check if Xcode command line tools are installed by running
# $ clang -v
#
# - Install Homebrew via
# $ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
# - Install CMake and Open MPI via Homebrew
# $  brew install cmake open-mpi
#
# - macOS users with Intel machines also need GCC
# $  brew install gcc@13
#
# - Export compiler environment:
#
# ------------------- macOS arm64 -------------------
#
# If you are running an ARM based macOS device (M1, M2, etc.), we strongly recommend
# using the clang compiler, which is the default. You can check so by running
# $ mpicxx -v
# If it reports "clang", you are good to go.
#
# ARM support is still experimental and not all packages and options work
# without problems. It might be easiest to start by only enabling the packages
# you care about.
#
# ------------------- macOS Intel -------------------
#
# If you are not running on an ARM device (traditional Intel based laptops), we
# strongly recommend using gcc instead of clang. This can be achieved by running
#
# $ export CC=mpicc; export CXX=mpicxx; export FC=mpifort; export FF=mpifort; \
# OMPI_CC=gcc-13; export OMPI_CXX=g++-13; export OMPI_FC=gfortran-13
#
# ---------------------------------------------------
#
# - If you are missing any steps, abort this installation now, do the changes and then
# run candi again!
#
# You might also want to consult:
# - https://github.com/dealii/dealii/wiki/MacOSX (for Intel Macs)
# - https://github.com/dealii/dealii/wiki/Apple-ARM-M1-OSX (for M1â€“M4 Macs)
#
# If you encounter runtime problems with missing *.dylib libraries,
# you may change the security policy for developments. To do so,
# enable Terminal in System Preferences / Security & Privacy / Developer Tools .
##

if [ "$(machine)" = "arm64e" ]; then
  # Remove cmake from the PACKAGES list because the preferred install method
  # for cmake on macOS is via Homebrew (so cmake will always be in the path)
  PACKAGES="${PACKAGES//once:cmake/}"
  PACKAGES="${PACKAGES//cmake/}"

  # Trilinos will link with netcdf and indirectly hdf5, but linking fails. Just
  # disable this for now.
  TRILINOS_WITH_SEACAS=OFF

  # Trilinos defaults to c++17 while deal.II 9.5 defaults to c++14 with clang 14,
  # which then fails to compile when including Kokkos coming from Trilinos:
  DEAL_II_CONFOPTS="-DCMAKE_CXX_STANDARD=17 ${DEAL_II_CONFOPTS}"
fi
