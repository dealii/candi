################################################################################
# ScaLAPACK
################################################################################

# TODO:
# BLACS is provided by ScaLAPACK

VERSION=2.1.0
CHECKSUM=e9ae970238030fa1e8ee022a9d3e6fbb

EXTRACTSTO=scalapack-${VERSION}

NAME=v${VERSION}
PACKING=.tar.gz

SOURCE=https://github.com/Reference-ScaLAPACK/scalapack/archive/
BUILDCHAIN=cmake

BUILDDIR=${BUILD_PATH}/scalapack-${VERSION}
INSTALL_PATH=${INSTALL_PATH}/scalapack-${VERSION}

# Set compilers & compiler options
#if [ ! -z "${CC}" ]; then
#    CONFOPTS="${CONFOPTS} \
#      -D CMAKE_C_COMPILER=${CC}"
#fi

#if [ ! -z "${CXX}" ]; then
#    CONFOPTS="${CONFOPTS} \
#      -D CMAKE_CXX_COMPILER=${CXX}"
#fi

#if [ ! -z "${FC}" ]; then
#    CONFOPTS="${CONFOPTS} \
#      -D CMAKE_Fortran_COMPILER=${FC}"
#fi

# Set Fortran flags
if [ -n ${FC} ]; then
    FORTRAN_MAJOR_VERSION=$(echo __GNUC__ | ${FC} -E -xc - | tail -n 1)
    if [ ${FORTRAN_MAJOR_VERSION} > 9 ]; then
        CONFOPTS="${CONFOPTS} \
        -D CMAKE_Fortran_FLAGS='-fPIC -g -O3 -fallow-argument-mismatch' "
    else
        CONFOPTS="${CONFOPTS} \
        -D CMAKE_Fortran_FLAGS='-fPIC -g -O3' "
    fi
fi

# Set C flags
CONFOPTS="${CONFOPTS} -D CMAKE_C_FLAGS:STRING='-fPIC -g -O3 ' "

CONFOPTS="${CONFOPTS} -D CMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON"

# Set intel MKL options
if [ "${MKL}" = "ON" ]; then
    cecho ${INFO} "MUMPS: configuration with MKL"
    CONFOPTS="${CONFOPTS} -D MKLROOT=${MKL_DIR}"
else
    # Set BLAS and LAPACK directories (if MKL is not used)
    if [ -n "${BLAS_DIR}" ]; then
        cecho ${INFO} "ScaLAPACK: configuration with BLAS_DIR=${BLAS_DIR}"
        CONFOPTS="${CONFOPTS} -D BLAS_LIBRARY_DIRS:STRING=${BLAS_DIR}"
    fi

    if [ -n "${LAPACK_DIR}" ]; then
        cecho ${INFO} "ScaLAPACK: configuration with LAPACK_DIR=${LAPACK_DIR}"
        CONFOPTS="${CONFOPTS} -D LAPACK_LIBRARY_DIRS:STRING=${LAPACK_DIR}"
    fi
fi

package_specific_register () {
    export SCALAPACK_DIR=${INSTALL_PATH}

    # BLACS is provided by ScaLAPACK

    # TODO: it seems that BLACS is not installed through scalapack
    # TODO: check if */lib is useful and consider specific_conf
    #
    # only export the BLACS dir when MKL is not provided,
    # so we do not override the MKL BLACS_DIR
    if [ ${MKL} = OFF ]; then
        export BLACS_DIR=${INSTALL_PATH}/lib
    fi
}

package_specific_conf () {
    # Generate configuration file
    CONFIG_FILE=${CONFIGURATION_PATH}/${EXTRACTSTO}
    rm -f $CONFIG_FILE

    echo "export SCALAPACK_DIR=${INSTALL_PATH}" >> $CONFIG_FILE
}
